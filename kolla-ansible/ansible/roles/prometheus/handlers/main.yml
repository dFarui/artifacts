---
# Pull prometheus-server image on each node, so it will be available
# on service failover
- name: Pull prometheus-server image
  vars:
    service_name: "prometheus-server"
    service: "{{ prometheus_pacemaker_services[service_name] }}"
  become: true
  kolla_docker:
    action: "pull_image"
    image: "{{ service.image }}"
  when:
    - service.enabled | bool
    - inventory_hostname in groups[service.group]
  listen: "Restart prometheus-server container"

- name: Create prometheus-server resource
  vars:
    service_name: "prometheus-server"
    service: "{{ prometheus_pacemaker_services[service_name] }}"
    volumes: >-
      {% set volumes = [] -%}
      {% for volume in service['volumes'] -%}
        {% if volume -%}
          {% if volume[0] != '/' and volume.split(':') | length == 2 -%}
            {% set elem = volume ~ ':rw' -%}
            {{ volumes.append(elem) -}}
          {% else -%}
            {{ volumes.append(volume) -}}
          {% endif -%}
        {% endif -%}
      {% endfor -%}
      {{ volumes | map('regex_replace', '(.*)', '-v \1') | join(' ') -}}
    service_dimensions: "{{ service['dimensions'] }}"
    kolla_environment:
      KOLLA_CONFIG_STRATEGY: "{{ config_strategy }}"
      KOLLA_SERVICE_NAME: "{{ service_name }}"
    service_environment: >-
      {% set service_environment = [] -%}
      {% for key, value in kolla_environment.items() -%}
        {% set elem = key ~ '=' ~ value -%}
        {{ service_environment.append(elem) -}}
      {% endfor -%}
      {{ service_environment | map('regex_replace', '(.*)', '-e \1') | join(' ') -}}
    cgroup_parent: "{{ '--cgroup-parent=' ~ service['dimensions']['cgroup_parent'] if 'cgroup_parent' in service['dimensions'] else '' }}"
    run_opts: "--net=host {{ volumes }} {{ service_environment }} {{ cgroup_parent }} --label service-component={{ service_name }}"
  delegate_to: "{{ groups['pacemaker'][0] }}"
  become: True
  run_once: True
  pacemaker:
    action: add_resource
    name: "p_{{ service_name }}"
    type: primitive
    agent: 'ocf:heartbeat:docker'
    recreate: True
    parameter:
      image: "{{ service.image }}"
      name: "{{ service_name }}"
      allow_pull: "true"
      run_opts: "{{ run_opts }}"
      run_cmd: "kolla_start"
      monitor_cmd: "/usr/bin/true"
      force_kill: "true"
      reuse: "false"
    operation:
      monitor:
        interval: "30s"
        timeout: "30s"
    meta:
      failure-timeout: 120
  when:
    - service.enabled | bool
    - inventory_hostname in groups[service.group]
  listen: "Restart prometheus-server container"

- name: Put prometheus-server role for its hosting node
  vars:
    service_name: "prometheus-server"
    service: "{{ prometheus_pacemaker_services[service_name] }}"
  delegate_to: "{{ groups['pacemaker'][0] }}"
  become: True
  run_once: True
  pacemaker:
    action: set_node_attribute
    node: "{{ hostvars[item]['ansible_nodename'] }}"
    attribute: "{{ service_name }}-role"
    value: "true"
  loop: "{{ groups[service_name] }}"
  when:
    - service.enabled | bool
    - inventory_hostname in groups[service.group]
  listen: "Restart prometheus-server container"

- name: Restrict prometheus-server instance location
  vars:
    service_name: "prometheus-server"
    service: "{{ prometheus_pacemaker_services[service_name] }}"
  delegate_to: "{{ groups['pacemaker'][0] }}"
  become: True
  run_once: True
  pacemaker:
    action: add_location_constraint
    name: "location-{{ service_name }}"
    resource: "p_{{ service_name }}"
    attribute: "resource-discovery=exclusive"
    rules: "rule 100: {{ service_name }}-role eq true"
  when:
    - service.enabled | bool
    - inventory_hostname in groups[service.group]
  listen: "Restart prometheus-server container"

- name: Waiting for prometheus-server to start
  vars:
    service_name: "prometheus-server"
    service: "{{ prometheus_pacemaker_services[service_name] }}"
  delegate_to: "{{ groups['pacemaker'][0] }}"
  run_once: True
  become: True
  shell: 'docker exec pacemaker crm resource locate p_{{ service_name }}'
  register: result
  until: "'resource p_' ~ service_name ~ ' is running on:' in result.stdout"
  changed_when: False
  retries: 12
  delay: 5
  when:
    - service.enabled | bool
    - inventory_hostname in groups[service.group]
  listen: "Restart prometheus-server container"

- name: Restart prometheus-node-exporter container
  vars:
    service_name: "prometheus-node-exporter"
    service: "{{ prometheus_services[service_name] }}"
  become: true
  kolla_docker:
    action: "recreate_or_restart_container"
    common_options: "{{ docker_common_options }}"
    name: "{{ service.container_name }}"
    image: "{{ service.image }}"
    pid_mode: "{{ service.pid_mode | default(emit) }}"
    volumes: "{{ service.volumes }}"
    dimensions: "{{ service.dimensions }}"
    labels:
      service-component: "{{ service_name }}"
  when:
    - kolla_action != "config"

- name: Restart prometheus-mysqld-exporter container
  vars:
    service_name: "prometheus-mysqld-exporter"
    service: "{{ prometheus_services[service_name] }}"
  become: true
  kolla_docker:
    action: "recreate_or_restart_container"
    common_options: "{{ docker_common_options }}"
    name: "{{ service.container_name }}"
    image: "{{ service.image }}"
    volumes: "{{ service.volumes }}"
    dimensions: "{{ service.dimensions }}"
    labels:
      service-component: "{{ service_name }}"
  when:
    - kolla_action != "config"

- name: Restart prometheus-haproxy-exporter container
  vars:
    service_name: "prometheus-haproxy-exporter"
    service: "{{ prometheus_services[service_name] }}"
  become: true
  kolla_docker:
    action: "recreate_or_restart_container"
    common_options: "{{ docker_common_options }}"
    name: "{{ service.container_name }}"
    image: "{{ service.image }}"
    volumes: "{{ service.volumes }}"
    dimensions: "{{ service.dimensions }}"
    labels:
      service-component: "{{ service_name }}"
  when:
    - kolla_action != "config"

- name: Restart prometheus-memcached-exporter container
  vars:
    service_name: "prometheus-memcached-exporter"
    service: "{{ prometheus_services[service_name] }}"
  become: true
  kolla_docker:
    action: "recreate_or_restart_container"
    common_options: "{{ docker_common_options }}"
    name: "{{ service.container_name }}"
    image: "{{ service.image }}"
    volumes: "{{ service.volumes }}"
    dimensions: "{{ service.dimensions }}"
    labels:
      service-component: "{{ service_name }}"
  when:
    - kolla_action != "config"

- name: Restart prometheus-cadvisor container
  vars:
    service_name: "prometheus-cadvisor"
    service: "{{ prometheus_services[service_name] }}"
  become: true
  kolla_docker:
    action: "recreate_or_restart_container"
    common_options: "{{ docker_common_options }}"
    name: "{{ service.container_name }}"
    image: "{{ service.image }}"
    volumes: "{{ service.volumes }}"
    dimensions: "{{ service.dimensions }}"
    privileged: "{{ service.privileged }}"
    labels:
      service-component: "{{ service_name }}"
  when:
    - kolla_action != "config"

# Pull prometheus-alertmanager image on each node, so it will be available
# on service failover
- name: Pull prometheus-alertmanager image
  vars:
    service_name: "prometheus-alertmanager"
    service: "{{ prometheus_pacemaker_services[service_name] }}"
  become: true
  kolla_docker:
    action: "pull_image"
    image: "{{ service.image }}"
  when:
    - service.enabled | bool
    - inventory_hostname in groups[service.group]
  listen: "Restart prometheus-alertmanager container"

- name: Create prometheus-alertmanager resource
  vars:
    service_name: "prometheus-alertmanager"
    service: "{{ prometheus_pacemaker_services[service_name] }}"
    volumes: >-
      {% set volumes = [] -%}
      {% for volume in service['volumes'] -%}
        {% if volume -%}
          {% if volume[0] != '/' and volume.split(':') | length == 2 -%}
            {% set elem = volume ~ ':rw' -%}
            {{ volumes.append(elem) -}}
          {% else -%}
            {{ volumes.append(volume) -}}
          {% endif -%}
        {% endif -%}
      {% endfor -%}
      {{ volumes | map('regex_replace', '(.*)', '-v \1') | join(' ') -}}
    service_dimensions: "{{ service['dimensions'] }}"
    kolla_environment:
      KOLLA_CONFIG_STRATEGY: "{{ config_strategy }}"
      KOLLA_SERVICE_NAME: "{{ service_name }}"
    service_environment: >-
      {% set service_environment = [] -%}
      {% for key, value in kolla_environment.items() -%}
        {% set elem = key ~ '=' ~ value -%}
        {{ service_environment.append(elem) -}}
      {% endfor -%}
      {{ service_environment | map('regex_replace', '(.*)', '-e \1') | join(' ') -}}
    cgroup_parent: "{{ '--cgroup-parent=' ~ service['dimensions']['cgroup_parent'] if 'cgroup_parent' in service['dimensions'] else '' }}"
    run_opts: "--net=host {{ volumes }} {{ service_environment }} {{ cgroup_parent }} --label service-component={{ service_name }}"
  delegate_to: "{{ groups['pacemaker'][0] }}"
  become: True
  run_once: True
  pacemaker:
    action: add_resource
    name: "p_{{ service_name }}"
    type: primitive
    agent: 'ocf:heartbeat:docker'
    recreate: True
    parameter:
      image: "{{ service.image }}"
      name: "{{ service_name }}"
      allow_pull: "true"
      run_opts: "{{ run_opts }}"
      run_cmd: "kolla_start"
      monitor_cmd: "/usr/bin/true"
      force_kill: "true"
      reuse: "false"
    operation:
      monitor:
        interval: "30s"
        timeout: "30s"
    meta:
      failure-timeout: 120
  when:
    - service.enabled | bool
    - inventory_hostname in groups[service.group]
  listen: "Restart prometheus-alertmanager container"

- name: Put prometheus-alertmanager role for its hosting node
  vars:
    service_name: "prometheus-alertmanager"
    service: "{{ prometheus_pacemaker_services[service_name] }}"
  delegate_to: "{{ groups['pacemaker'][0] }}"
  become: True
  run_once: True
  pacemaker:
    action: set_node_attribute
    node: "{{ hostvars[item]['ansible_nodename'] }}"
    attribute: "{{ service_name }}-role"
    value: "true"
  loop: "{{ groups[service_name] }}"
  when:
    - service.enabled | bool
    - inventory_hostname in groups[service.group]
  listen: "Restart prometheus-alertmanager container"

- name: Restrict prometheus-alertmanager instance location
  vars:
    service_name: "prometheus-alertmanager"
    service: "{{ prometheus_pacemaker_services[service_name] }}"
  delegate_to: "{{ groups['pacemaker'][0] }}"
  become: True
  run_once: True
  pacemaker:
    action: add_location_constraint
    name: "location-{{ service_name }}"
    resource: "p_{{ service_name }}"
    attribute: "resource-discovery=exclusive"
    rules: "rule 100: {{ service_name }}-role eq true"
  when:
    - service.enabled | bool
    - inventory_hostname in groups[service.group]
  listen: "Restart prometheus-alertmanager container"

- name: Waiting for prometheus-alertmanager to start
  vars:
    service_name: "prometheus-alertmanager"
    service: "{{ prometheus_pacemaker_services[service_name] }}"
  delegate_to: "{{ groups['pacemaker'][0] }}"
  run_once: True
  become: True
  shell: 'docker exec pacemaker crm resource locate p_{{ service_name }}'
  register: result
  until: "'resource p_' ~ service_name ~ ' is running on:' in result.stdout"
  changed_when: False
  retries: 12
  delay: 5
  when:
    - service.enabled | bool
    - inventory_hostname in groups[service.group]
  listen: "Restart prometheus-alertmanager container"

- name: Restart prometheus-openstack-exporter container
  vars:
    service_name: "prometheus-openstack-exporter"
    service: "{{ prometheus_services[service_name] }}"
  become: true
  kolla_docker:
    action: "recreate_or_restart_container"
    common_options: "{{ docker_common_options }}"
    name: "{{ service.container_name }}"
    image: "{{ service.image }}"
    volumes: "{{ service.volumes }}"
    dimensions: "{{ service.dimensions }}"
    labels:
      service-component: "{{ service_name }}"
  when:
    - kolla_action != "config"

- name: Restart prometheus-elasticsearch-exporter container
  vars:
    service_name: "prometheus-elasticsearch-exporter"
    service: "{{ prometheus_services[service_name] }}"
  become: true
  kolla_docker:
    action: "recreate_or_restart_container"
    common_options: "{{ docker_common_options }}"
    name: "{{ service.container_name }}"
    image: "{{ service.image }}"
    volumes: "{{ service.volumes }}"
    dimensions: "{{ service.dimensions }}"
    labels:
      service-component: "{{ service_name }}"
  when:
    - kolla_action != "config"

- name: Restart prometheus-blackbox-exporter container
  vars:
    service_name: "prometheus-blackbox-exporter"
    service: "{{ prometheus_services[service_name] }}"
  become: true
  kolla_docker:
    action: "recreate_or_restart_container"
    common_options: "{{ docker_common_options }}"
    name: "{{ service.container_name }}"
    image: "{{ service.image }}"
    volumes: "{{ service.volumes }}"
    dimensions: "{{ service.dimensions }}"
    labels:
      service-component: "{{ service_name }}"
  when:
    - kolla_action != "config"
