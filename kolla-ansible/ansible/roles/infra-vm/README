This role defines or redefines (if already exists) a VM which is supposed to be used
as an infra VM.

The variables this role expects:

  - import_role:
      name: infra-vm
    vars:

      # Infra VMs are grouped by infra_vm_group_id. This attribute is used when
      # generating unique MAC address for the VM's network interface in case it is
      # bridged. I hardly believe the MAC addresses can guaranteed to be unique
      # without this and the vm_id below -- in contrast of those that are
      # random-generated by libvirt.

      infra_vm_group_id: 0

      # The prefix of the name of the VM (domain) in libvirt. This is a readable
      # (string) variant of infra_vm_group_id.

      vm_name_prefix: my-infra-vm

      # The ID of the VM within its group. vm_name_prefix, '-', and vm_id are
      # concatenated to form the VM name, and is used to generate its UUID. It is
      # also used to generate MAC addresses for bridged network interfaces.

      vm_id: 1

      # This is a revision number of the definition, stored in the metadata scetion
      # of the domain XML. If the definition changes (eg. more vCPU is given to the
      # VM), this must be bumped, otherwise the role won't know that a redefinition
      # is needed (including a VM shutdown, destroy and start).

      vm_definition_revision: 1

      # Make the VM managed by libvirt's guest VM autostart management.

      autostart: false

      memory_gib: 4

      vcpu_num: 2

      # Below comes the devices. PCI slots are assigned sequentially according to the
      # definition order, using the PCI bus 0, unless both pci_bus and pci_slot is
      # specified. Please be aware that PCI bus 0 is reserved for the devices
      # automatically added by libvirt to the domain XML and for the previously
      # mentioned slot assignment, so better to avoid.

      # The MAC address for bridged network interfaces will be generated using the
      # following template:
      #
      #   02:01:ec:{{ infra_vm_group_id }}:{{ vm_id }}:{{ interface_counter }}
      #
      # This results a locally administered (02), Ericsson-specific-like (00:01:ec
      # OUI belongs to Ericsson, 02:01:ec is obviously not, because it is locally
      # administered, but looks like except that the U/L bit is flipped on) address.

      devices:
        - type: disk_image
          path: /var/lib/libvirt/images/cirros.img
          create: false         # create the disk image file on host; defaults to true
          target_device: vda
        - type: disk_image
          size_gib: 150
          path: /var/lib/libvirt/images/{{vm_name_prefix}}-{{vm_id}}-disk1.qcow2
          target_device: vdb
          create: true
          preallocate: falloc     # How/if to preallocate disk image file on the host; defaults to full
          pci_bus: 1
          pci_slot: 1
        - type: bridge_net_if
          source_device: brgw
          # this device gets the next free slot on the PCI bus 0
        - type: bridge_net_if
          source_device: br_oobm_ctrl
          pci_bus: 2
          pci_slot: 10
        - type: direct_net_if
          source_device: bond1
          pci_bus: 2
          pci_slot: 1

The VM is ensured to be running at the end of the domain definition or redefinition,
and boot from disk, then net.
